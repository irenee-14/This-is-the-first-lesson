generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tag {
  name           String          @unique @map("name") @db.VarChar(30)
  id             String          @id @default(uuid()) @map("tag_id")
  backgroundTags BackgroundTag[]
  characterTags  CharacterTag[]

  @@map("tags")
}

model CharacterTag {
  characterId String    @map("character_id")
  tagId       String    @map("tag_id")
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  tag         Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([tagId, characterId])
  @@index([tagId])
  @@index([characterId])
  @@map("character_tags")
}

model BackgroundTag {
  backgroundId String     @map("background_id")
  tagId        String     @map("tag_id")
  background   Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  tag          Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([tagId, backgroundId])
  @@index([tagId])
  @@index([backgroundId])
  @@map("background_tags")
}

model Character {
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  description   String         @map("description")
  dialogueStyle String         @map("dialogueStyle")
  gender        Gender         @map("gender")
  name          String         @unique @map("name") @db.VarChar(30)
  personality   String         @map("personality")
  traits        String         @map("traits")
  writerNote    String?        @map("writerNote")
  id            String         @id @default(uuid()) @map("character_id")
  characterImg  String?        @default("IMAGE") @map("character_img") @db.VarChar(255)
  writerId      String         @map("writer_id")
  tags          String[]       @map("tags")
  characterTags CharacterTag[]
  writer        User           @relation(fields: [writerId], references: [id], onDelete: Cascade)
  chats         Chat[]
  memories      Memory[]
  memoryPieces  MemoryPiece[]
  messages      Message[]
  stories       Story[]

  @@index([writerId])
  @@map("characters")
}

model Background {
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  description      String           @map("description")
  name             String           @map("name") @db.VarChar(255)
  prompt           String           @map("prompt")
  tags             String[]         @map("tags")
  basic            Boolean          @map("basic")
  id               String           @id @default(uuid()) @map("background_id")
  backgroundImg    String?          @default("IMAGE") @map("background_img") @db.VarChar(255)
  introDescription String           @map("intro_description")
  introTitle       String           @map("intro_title") @db.VarChar(255)
  unlockChatCount  Int              @default(100) @map("unlock_chat_count")
  writerId         String           @map("writer_id")
  backgroundSteps  BackgroundStep[]
  backgroundTags   BackgroundTag[]
  writer           User             @relation(fields: [writerId], references: [id], onDelete: Cascade)
  chats            Chat[]
  messages         Message[]
  openBackgrounds  OpenBackground[]
  stories          Story[]

  @@index([writerId])
  @@map("backgrounds")
}

model OpenBackground {
  backgroundId String         @map("background_id")
  flowId       String         @map("flow_id")
  id           String         @id @default(uuid()) @map("open_id")
  openedAt     DateTime       @default(now()) @map("opened_at")
  userId       String         @map("user_id")
  writerId     String         @map("writer_id")
  background   Background     @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  flow         BackgroundFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  writer       User           @relation("WriterOpenBackgrounds", fields: [writerId], references: [id], onDelete: Cascade)

  @@map("open_backgrounds")
}

model BackgroundFlow {
  createdAt       DateTime         @default(now())
  version         Int              @map("version")
  id              String           @id @default(uuid()) @map("flow_id")
  writerId        String           @map("writer_id")
  writer          User             @relation(fields: [writerId], references: [id], onDelete: Cascade)
  backgroundSteps BackgroundStep[]
  openBackgrounds OpenBackground[]

  @@map("background_flows")
}

model BackgroundStep {
  backgroundId String         @map("background_id")
  flowId       String         @map("flow_id")
  orderKey     Int            @map("order_key")
  id           String         @id @default(uuid()) @map("step_id")
  background   Background     @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  flow         BackgroundFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@map("background_steps")
}

model User {
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  bio                   String?          @map("bio") @db.VarChar(255)
  email                 String           @unique @map("email") @db.VarChar(255)
  follower              Int              @default(0) @map("follower")
  following             Int              @default(0) @map("following")
  name                  String           @unique @map("name") @db.VarChar(30)
  password              String           @map("password") @db.VarChar(255)
  totalChat             Int              @default(0) @map("total_chat")
  id                    String           @id @default(uuid()) @map("user_id")
  backgroundFlows       BackgroundFlow[]
  backgrounds           Background[]
  characters            Character[]
  chats                 Chat[]
  memories              Memory[]
  openBackgrounds       OpenBackground[]
  writerOpenBackgrounds OpenBackground[] @relation("WriterOpenBackgrounds")
  personas              Persona[]
  stories               Story[]

  @@map("users")
}

model Persona {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gender    Gender   @map("gender")
  name      String   @map("name") @db.VarChar(30)
  prompt    String   @map("prompt")
  id        String   @id @default(uuid()) @map("persona_id")
  userId    String   @map("user_id")
  chats     Chat[]
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("personas")
}

model Story {
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  basic           Boolean    @map("basic")
  name            String     @map("name") @db.VarChar(255)
  opening         String     @map("opening")
  backgroundId    String     @map("background_id")
  characterId     String     @map("character_id")
  characterPrompt String     @map("character_prompt")
  id              String     @id @default(uuid()) @map("story_id")
  userId          String     @map("user_id")
  chats           Chat[]
  background      Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  character       Character  @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stories")
}

model Chat {
  backgroundId  String        @map("background_id")
  characterId   String        @map("character_id")
  chatCount     BigInt        @map("chat_count")
  id            String        @id @default(uuid()) @map("chat_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  ownerId       String        @map("owner_id")
  personaId     String        @map("persona_id")
  storyId       String        @map("story_id")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  personaGender String        @map("persona_gender") @db.VarChar(50)
  personaName   String        @map("persona_name") @db.VarChar(255)
  personaTraits String        @map("persona_traits") @db.VarChar(1000)
  background    Background    @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  character     Character     @relation(fields: [characterId], references: [id], onDelete: Cascade)
  owner         User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  persona       Persona       @relation(fields: [personaId], references: [id], onDelete: Cascade)
  story         Story         @relation(fields: [storyId], references: [id], onDelete: Cascade)
  memoryPieces  MemoryPiece[]
  messages      Message[]

  @@map("chats")
}

model Memory {
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  characterId   String       @map("character_id")
  maxPieceCount Int          @default(30) @map("max_piece_count")
  id            String       @id @default(uuid()) @map("memory_id")
  userId        String?      @map("user_id")
  character     Character    @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user          User?        @relation(fields: [userId], references: [id])
  memoryPieces  MemoryPiece?

  @@map("memories")
}

model MemoryPiece {
  summary        String?   @map("summary") @db.VarChar(1000)
  characterId    String    @map("character_id")
  chatId         String    @map("chat_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  endMessageId   String    @map("endMessage_id")
  memoryId       String    @unique @map("memory_id")
  id             String    @id @default(uuid()) @map("piece_id")
  startMessageId String    @map("startMessage_id")
  character      Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  chat           Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  memory         Memory    @relation(fields: [memoryId], references: [id], onDelete: Cascade)

  @@map("memory_pieces")
}

model Message {
  contents     String     @map("contents")
  role         Role       @map("role")
  seq          Int        @default(0) @map("seq")
  backgroundId String     @map("background_id")
  characterId  String     @map("character_id")
  chatId       String     @map("chat_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  background   Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  character    Character  @relation(fields: [characterId], references: [id], onDelete: Cascade)
  chat         Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@id([chatId, seq])
  @@map("messages")
}

enum Gender {
  male
  female
  undisclosed
}

enum Role {
  character
  persona
}
