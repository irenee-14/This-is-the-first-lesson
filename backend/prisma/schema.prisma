// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  id         String   @id @default(cuid()) @map("userId")
  name       String?
  bio        String?
  following  Int      @default(0)
  follower   Int      @default(0)
  totalChat  Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 관계
  characters        Character[]
  backgrounds       Background[]
  backgroundFlows   BackgroundFlow[]
  stories           Story[]
  chats             Chat[]
  memories          Memory[]
  openBackgrounds   OpenBackground[]
  persona           Persona?

  @@map("users")
}

// 페르소나 모델
model Persona {
  id       String @id @default(cuid()) @map("personalId")
  userId   String @unique @map("userId")
  name     String?
  gender   String?
  prompt   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats Chat[]

  @@map("personas")
}

// 태그 모델
model Tag {
  id   String @id @default(cuid()) @map("tagId")
  name String?

  // 관계
  characterTags  CharacterTag[]
  backgroundTags BackgroundTag[]

  @@map("tags")
}

// 캐릭터 모델
model Character {
  id             String   @id @default(cuid()) @map("characterId")
  writerId       String   @map("writerId")
  name           String?
  characterImg   String?
  traits         String?
  personality    String?
  dialogueStyle  String?
  gender         String?
  description    String?
  writerNote     String?
  tags           String[] // PostgreSQL ARRAY
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // 관계
  writer         User     @relation(fields: [writerId], references: [id], onDelete: Cascade)
  characterTags  CharacterTag[]
  stories        Story[]
  chats          Chat[]
  memories       Memory[]
  memoryPieces   MemoryPiece[]
  messages       Message[]

  @@map("characters")
}

// 캐릭터 태그 조인 테이블
model CharacterTag {
  tagId       String @map("tagId")
  characterId String @map("characterId")

  // 관계
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@id([tagId, characterId])
  @@map("character_tags")
}

// 배경 모델
model Background {
  id                String   @id @default(cuid()) @map("backgroundId")
  writerId          String   @map("writerId")
  name              String?
  description       String?
  prompt            String?
  tags              String[] // PostgreSQL ARRAY
  introTitle        String?
  introDescription  String?
  unlockChatCount   Int?
  avatarUrl         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // 관계
  writer            User     @relation(fields: [writerId], references: [id], onDelete: Cascade)
  backgroundTags    BackgroundTag[]
  backgroundSteps   BackgroundStep[]
  openBackgrounds   OpenBackground[]
  stories           Story[]
  chats             Chat[]
  messages          Message[]

  @@map("backgrounds")
}

// 배경 태그 조인 테이블
model BackgroundTag {
  tagId        String @map("tagId")
  backgroundId String @map("backgroundId")

  // 관계
  tag        Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  background Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)

  @@id([tagId, backgroundId])
  @@map("background_tags")
}

// 배경 플로우 모델
model BackgroundFlow {
  id        String   @id @default(cuid()) @map("flowId")
  writerId  String   @map("writerId")
  version   String?
  createdAt DateTime @default(now())

  // 관계
  writer         User            @relation(fields: [writerId], references: [id], onDelete: Cascade)
  backgroundSteps BackgroundStep[]
  openBackgrounds OpenBackground[]

  @@map("background_flows")
}

// 배경 플로우 단계 모델
model BackgroundStep {
  id           String @id @default(cuid()) @map("stepId")
  flowId       String @map("flowId")
  backgroundId String @map("backgroundId")
  orderKey     Int?

  // 관계
  flow       BackgroundFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  background Background     @relation(fields: [backgroundId], references: [id], onDelete: Cascade)

  @@map("background_steps")
}

// 오픈된 배경 모델
model OpenBackground {
  id           String   @id @default(cuid()) @map("openId")
  userId       String   @map("userId")
  backgroundId String   @map("backgroundId")
  writerId     String?
  flowId       String?
  openedAt     DateTime @default(now())

  // 관계
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  background Background     @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  flow       BackgroundFlow? @relation(fields: [flowId], references: [id], onDelete: SetNull)

  @@map("open_backgrounds")
}

// 스토리 모델
model Story {
  id               String  @id @default(cuid()) @map("storyId")
  backgroundId     String  @map("backgroundId")
  characterId      String  @map("characterId")
  userId           String? @map("userId")
  name             String?
  characterPrompt  String?
  basic            Boolean @default(false)
  opening          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // 관계
  background Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  character  Character  @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user       User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  chats      Chat[]

  @@map("stories")
}

// 채팅 모델
model Chat {
  id           String   @id @default(cuid()) @map("chatId")
  backgroundId String   @map("backgroundId")
  characterId  String   @map("characterId")
  storyId      String   @map("storyId")
  ownerId      String   @map("ownerId")
  personalId   String   @map("personalId")
  chatCount    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // 관계
  background    Background     @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  character     Character      @relation(fields: [characterId], references: [id], onDelete: Cascade)
  story         Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  persona       Persona        @relation(fields: [personalId], references: [id], onDelete: Cascade)
  messages      Message[]
  memoryPieces  MemoryPiece[]

  @@map("chats")
}

// 기억 모델
model Memory {
  id            String @id @default(cuid()) @map("memoryId")
  characterId   String @map("characterId")
  userId        String? @map("userId")
  maxPieceCount Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 관계
  character     Character      @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  memoryPieces  MemoryPiece[]

  @@map("memories")
}

// 기억 조각 모델
model MemoryPiece {
  id              String   @id @default(cuid()) @map("pieceId")
  memoryId        String   @map("memoryId")
  characterId     String   @map("characterId")
  chatId          String?  @map("chatId")
  startMessageId  String?
  endMessageId    String?
  summary         String?
  createdAt       DateTime @default(now())

  // 관계
  memory    Memory  @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  chat      Chat?   @relation(fields: [chatId], references: [id], onDelete: SetNull)

  @@map("memory_pieces")
}

// 메시지 모델
model Message {
  id           String   @id @default(cuid()) @map("messagesId")
  backgroundId String   @map("backgroundId")
  characterId  String   @map("characterId")
  chatId       String?  @map("chatId")
  seq          Int?
  role         String?
  contents     String?
  createdAt    DateTime @default(now())

  // 관계
  background Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  character  Character  @relation(fields: [characterId], references: [id], onDelete: Cascade)
  chat       Chat?      @relation(fields: [chatId], references: [id], onDelete: SetNull)

  @@map("messages")
}
