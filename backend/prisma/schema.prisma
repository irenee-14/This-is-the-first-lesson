// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 태그 모델
model Tag {
  id   String @id @default(uuid()) @map("tag_id")
  name String @unique @db.VarChar(30) @map("name")

  // 관계
  characterTags  CharacterTag[]
  backgroundTags BackgroundTag[]

  @@map("tags")
}

// 캐릭터 태그 조인 테이블
model CharacterTag {
  tagId       String @map("tag_id")
  characterId String @map("character_id")

  // 관계
  tag       Tag       @relation(fields: [tagId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@id([tagId, characterId])
  @@index([tagId])
  @@index([characterId])
  @@map("character_tags")
}

// 배경 태그 조인 테이블
model BackgroundTag {
  tagId        String @map("tag_id")
  backgroundId String @map("background_id")

  // 관계
  tag        Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)
  background Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)

  @@id([tagId, backgroundId])
  @@index([tagId])
  @@index([backgroundId])
  @@map("background_tags")
}

// 캐릭터 모델
model Character {
  id             String   @id @default(uuid()) @map("character_id")
  writerId       String   @map("writer_id")
  name           String   @unique @db.VarChar(30) @map("name")
  characterImg   String?  @default("IMAGE") @db.VarChar(255) @map("character_img")
  traits         String   @map("traits")
  personality    String   @map("personality")
  dialogueStyle  String   @map("dialogueStyle")
  gender         Gender   @map("gender")
  description    String   @map("description")
  writerNote     String?  @map("writerNote")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // 관계
  writer         User     @relation(fields: [writerId], references: [id], onDelete: Cascade)
  characterTags  CharacterTag[]
  stories        Story[]
  chats          Chat[]
  memories       Memory[]
  memoryPieces   MemoryPiece[]
  messages       Message[]

  @@index([writerId])
  @@map("characters")
}

// 배경 모델
model Background {
  id                String   @id @default(uuid()) @map("background_id")
  writerId          String   @map("writer_id")
  name              String   @db.VarChar(255) @map("name")
  description       String   @map("description")
  prompt            String   @map("prompt")
  tags              String[] @map("tags")
  introTitle        String   @db.VarChar(255) @map("intro_title")
  introDescription  String   @map("intro_description")
  unlockChatCount   Int      @default(100) @map("unlock_chat_count")
  backgroundImg     String?  @default("IMAGE") @db.VarChar(255) @map("background_img")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // 관계
  writer            User     @relation(fields: [writerId], references: [id], onDelete: Cascade)
  backgroundTags    BackgroundTag[]
  backgroundSteps   BackgroundStep[]
  openBackgrounds   OpenBackground[]
  stories           Story[]
  chats             Chat[]
  messages          Message[]

  @@index([writerId])
  @@map("backgrounds")
}

// 오픈된 배경 모델
model OpenBackground {
  id           String   @id @default(uuid()) @map("open_id")
  userId       String   @map("user_id")
  backgroundId String   @map("background_id")
  writerId     String   @map("writer_id")
  flowId       String   @map("flow_id")
  openedAt     DateTime @default(now()) @map("opened_at")

  // 관계
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  background Background     @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  writer     User           @relation("WriterOpenBackgrounds", fields: [writerId], references: [id], onDelete: Cascade)
  flow       BackgroundFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@map("open_backgrounds")
}

// 배경 플로우 모델
model BackgroundFlow {
  id        String   @id @default(uuid()) @map("flow_id")
  writerId  String   @map("writer_id")
  version   Int      @map("version")
  createdAt DateTime @default(now())

  // 관계
  writer         User            @relation(fields: [writerId], references: [id], onDelete: Cascade)
  backgroundSteps BackgroundStep[]
  openBackgrounds OpenBackground[]

  @@map("background_flows")
}

// 배경 플로우 단계 모델
model BackgroundStep {
  id           String @id @default(uuid()) @map("step_id")
  flowId       String @map("flow_id")
  backgroundId String @map("background_id")
  orderKey     Int    @map("order_key")

  // 관계
  flow       BackgroundFlow @relation(fields: [flowId], references: [id], onDelete: Cascade)
  background Background     @relation(fields: [backgroundId], references: [id], onDelete: Cascade)

  @@map("background_steps")
}

// 사용자 모델
model User {
  id         String   @id @default(uuid()) @map("user_id")
  name       String   @unique @db.VarChar(30) @map("name")
  bio        String?  @db.VarChar(255) @map("bio")
  following  Int      @default(0) @map("following")
  follower   Int      @default(0) @map("follower")
  totalChat  Int      @default(0) @map("total_chat")
  email      String   @unique @db.VarChar(255) @map("email")
  password   String   @db.VarChar(255) @map("password")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 관계
  characters        Character[]
  backgrounds       Background[]
  backgroundFlows   BackgroundFlow[]
  stories           Story[]
  chats             Chat[]
  memories          Memory[]
  openBackgrounds   OpenBackground[]
  writerOpenBackgrounds OpenBackground[] @relation("WriterOpenBackgrounds")
  personas          Persona[]

  @@map("users")
}

// 페르소나 모델
model Persona {
  id       String @id @default(uuid()) @map("persona_id")
  userId   String @map("user_id")
  name     String @db.VarChar(30) @map("name")
  gender   Gender @map("gender")
  prompt   String @map("prompt")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats Chat[]

  @@map("personas")
}

// 스토리 모델
model Story {
  id               String   @id @default(uuid()) @map("story_id")
  backgroundId     String   @map("background_id")
  characterId      String   @map("character_id")
  userId           String   @map("user_id")
  basic            Boolean  @map("basic")
  tags             String[] @map("tags")
  name             String   @db.VarChar(255) @map("name")
  characterPrompt  String   @map("character_prompt")
  opening          String   @map("opening")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // 관계
  background Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  character  Character  @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  chats      Chat[]

  @@map("stories")
}

// 채팅 모델
model Chat {
  id           String   @id @default(uuid()) @map("chat_id")
  backgroundId String   @map("background_id")
  characterId  String   @map("character_id")
  personaId    String   @map("persona_id")
  storyId      String   @map("story_id")
  ownerId      String   @map("owner_id")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  chatCount    BigInt   @map("chat_count")

  // 관계
  background    Background     @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  character     Character      @relation(fields: [characterId], references: [id], onDelete: Cascade)
  persona       Persona        @relation(fields: [personaId], references: [id], onDelete: Cascade)
  story         Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)
  owner         User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  messages      Message[]
  memoryPieces  MemoryPiece[]

  @@map("chats")
}

// 기억 모델
model Memory {
  id            String @id @default(uuid()) @map("memory_id")
  characterId   String @map("character_id")
  userId        String? @map("user_id")
  maxPieceCount Int    @default(30) @map("max_piece_count")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // 관계
  character     Character      @relation(fields: [characterId], references: [id], onDelete: Cascade)
  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  memoryPieces  MemoryPiece[]

  @@map("memories")
}

// 기억 조각 모델
model MemoryPiece {
  id              String   @id @default(uuid()) @map("piece_id")
  memoryId        String   @unique @map("memory_id")
  characterId     String   @map("character_id")
  startMessageId  String   @map("startMessage_id")
  endMessageId    String   @map("endMessage_id")
  chatId          String   @map("chat_id")
  createdAt       DateTime @default(now()) @map("created_at")
  summary         String?  @db.VarChar(1000) @map("summary")

  // 관계
  memory    Memory  @relation(fields: [memoryId], references: [id], onDelete: Cascade)
  character Character @relation(fields: [characterId], references: [id], onDelete: Cascade)
  chat      Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("memory_pieces")
}

// 메시지 모델
model Message {
  chatId       String   @map("chat_id")
  seq          Int      @default(0) @map("seq")
  backgroundId String   @map("background_id")
  characterId  String   @map("character_id")
  role         Role     @map("role")
  contents     String   @map("contents")
  createdAt    DateTime @default(now()) @map("created_at")

  // 관계
  background Background @relation(fields: [backgroundId], references: [id], onDelete: Cascade)
  character  Character  @relation(fields: [characterId], references: [id], onDelete: Cascade)
  chat       Chat       @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@id([chatId, seq])
  @@map("messages")
}

// 열거형 정의
enum Gender {
  male
  female
  undisclosed
}

enum Role {
  character
  persona
}
